services:
  subs-tracker-backend:
    build:
      context: .
      dockerfile: DockerFile
    image: subs-tracker-backend
    container_name: subs-tracker-backend
    depends_on:
      - subs-tracker-database
      - subs-tracker-redis
    networks:
      - app-network
    environment:
      APP_KEY: "${APP_KEY}"
      APP_ENV: "${APP_ENV}"
      APP_DEBUG: "${APP_DEBUG}"
      
      FRONT_END_URL: "${FRONT_END_URL}"
      FRONTEND_SECRET: "${FRONTEND_SECRET}"
      
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
      DB_DATABASE: "${MYSQL_DATABASE}"
      DB_USERNAME: "${DB_USERNAME}"
      DB_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"

      MAIL_HOST: "${MAIL_HOST}"
      MAIL_PORT: "${MAIL_PORT}"
      MAIL_USERNAME: "${MAIL_USERNAME}"
      MAIL_PASSWORD: "${MAIL_PASSWORD}"
      MAIL_ENCRYPTION: "${MAIL_ENCRYPTION}"
      MAIL_FROM_ADDRESS: "${MAIL_FROM_ADDRESS}"

      JWT_SECRET: "${JWT_SECRET}"

  subs-tracker-nginx:
    image: nginx:stable
    container_name: subs-tracker-nginx
    ports:
      - "80:8000"
    volumes:
      - ./docker/nginx/nginx-ci-cd-stage.conf:/etc/nginx/conf.d/custom.conf
    depends_on:
      - subs-tracker-backend
    networks:
      - app-network
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost/api/up"]
    #   interval: 30s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 10s

  subs-tracker-database:
    image: mysql:8.0.42
    container_name: subs-tracker-database
    volumes:
      - db_data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
    networks:
      - app-network
    # ports:
    #   - "5554:${DB_PORT}"

  subs-tracker-redis:
    image: redis:8.0.2
    container_name: subs-tracker-redis
    volumes:
      - redis_data:/data
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--appendonly", "yes"]
    networks:
      - app-network
    # ports:
    #   - "6389:${REDIS_PORT}"

volumes:
  db_data:
    external: true
  redis_data:
    external: true

networks:
  app-network:
    driver: bridge
    external: true